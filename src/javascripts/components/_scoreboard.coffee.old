{div, p, a, strong, br, nav, button, span, strong} = React.DOM
{table, thead, tbody, tr, td, th} = React.DOM
{h6, h4, h3} = React.DOM
{ul, li} = React.DOM
Link = ReactRouter.Link

# -- Utils
dayToStr = (day) ->
  "#{day.day}-#{day.date}"

drawToStr = (draw) ->
  "draw-#{draw.label}-#{draw.starts_at}"

# -- Components

CompetitionDay = React.createClass
  render: ->
    { date, day } = @props.day
    active_class = ''
    active_class = ' active' if @props.active == true
    li className: "text-center#{active_class}",
      Link to: 'scoreboard-day', params: { competition_id: @props.routerState.params.competition_id, day: dayToStr( @props.day ) }, activeClassName: 'router-active',
        date
        br {}
        day

CompetitionDayList = React.createClass
  render: ->
    { days, filter, day } = @props
    ul className: 'pagination',
      days.map (day_item) =>
        CompetitionDay key: day_item.id, day: day_item, active: (day.id == day_item.id), routerState: @props.routerState

DrawListItem = React.createClass
  render: ->
    {draw} = @props
    active_class = ''
    active_class = 'active' if @props.active == true

    day = dayToStr @props.day
    draw = drawToStr @props.draw

    li className: active_class,
      Link to: 'scoreboard-draw', params: { competition_id: @props.routerState.params.competition_id, day: day, draw: draw }, activeClassName: 'router-active',
        "Draw #{draw.label}"
        br {}
        draw.starts_at

DrawList = React.createClass
  render: ->
    console.log 'DrawList', @props.draw
    {draws, changeDraw, day} = @props
    draw = @props.draw
    ul className: 'nav nav-tabs', role: 'tablist',
      draws.map (draw_item) =>
        DrawListItem key: draw_item.id, draw: draw_item, day: day, active: (draw_item.id == draw.id), routerState: @props.routerState

DrawSheetPosition = React.createClass
  render: ->
    { game, position, boxscore, ends } = @props
    lsfe = ''
    lsfe = '*' if position.first_hammer == true
    end_scores = position.end_scores || []
    is_final = game.state.toLowerCase() == "final"
    for es in end_scores
      unless es.score?
        es.score = 'X' if is_final
      else
        es.score = es.score.toString()

    # Add some padding for endscores
    if end_scores.length < ends
      padding = ends - end_scores.length
      for es in [0..padding]
        end_scores.push { score: '' }

    total = ''
    if position.end_scores?
      total = 0
      for score in end_scores
        total += parseInt(score.score) || 0
    tr {},
      td {},
        if position.team?
          a href: @props.teams_url + '#!' + position.team.url,
            span className: 'hidden-xs', position.team.name
            span className: 'visible-xs', position.team.short_name
        else
          'TBD'
      td className: 'lsfe', "#{lsfe}"
      [0..(ends-1)].map (endscore, key) ->
        td key: key, className: 'end-score', end_scores[endscore].score
      td className: 'total', total
      if boxscore == true
        td rowSpan: '2', className: 'hidden-xs',
          strong {}, game.state
          br {}
          a href: game.boxscore_url || '#boxscore-missing', 'Boxscore'

DrawSheetItem = React.createClass
  render: ->
    {competition, sheet, teams_url, competition} = @props
    number_of_ends = Math.max competition.number_of_ends || (sheet.game_positions[0].end_scores || []).length, (sheet.game_positions[1].end_scores || []).length    
    game_state = sheet.game.state.toLowerCase()
    boxscore_display = (game_state == "final") || (game_state.substr(0,5) == "after")
    sheet_name = sheet.name
    sheet_name += " : #{sheet.game.name}" if sheet.game.is_bracket == true
    div className: 'row',
      div className: 'col-xs-12',
        div className: 'table-responsive',
          table className: 'table table-bordered table-condensed',
            thead {},
              tr {},
                th {},
                  strong {}, sheet_name
                th className: 'lsfe',
                  span className: 'hidden-xs', 'LSFE'
                [1..number_of_ends].map (endscore, key) ->
                  th className: 'end-score', key: key, "#{endscore}"
                th className: 'total',
                  span className: 'hidden-xs', 'TOT'
                  span className: 'visible-xs', 'T'
                if boxscore_display
                  th className: 'hidden-xs', width: '10%', ''
            tbody {},
              DrawSheetPosition position: sheet.game_positions[0], ends: number_of_ends, game: sheet.game, routerState: @props.routerState, boxscore: boxscore_display
              DrawSheetPosition position: sheet.game_positions[1], ends: number_of_ends, game: sheet.game, routerState: @props.routerState

DrawSheetList = React.createClass
  render: ->
    {draw, competition, teams_url} = @props
    active_class = ''
    active_class = ' in active' if @props.active == true
    div className: "tab-pane fade#{active_class}", id: "draw#{draw.id}",
      div className: 'spacer'
      draw.draw_sheets.map (sheet, key) =>
        DrawSheetItem key: key, draw: draw, sheet: sheet, competition: competition, routerState: @props.routerState

DrawContentList = React.createClass
  render: ->
    {draws, competition, draw} = @props
    div className: 'tab-content',
      draws.map (draw_item) =>
        DrawSheetList key: draw_item.id, draw: draw_item, competition: competition, active: (draw.id == draw_item.id), routerState: @props.routerState

Scoreboard = React.createClass
  getInitialState: ->
    scoreboard: null
    days: []
    day: null
    draw: null
    pollInterval: 30000

  determineDraw: (days) ->
    console.log 'Scoreboard.determineDraw', days

    # Get supplied routing parameters, if they exist
    selected_day = if @props.routerState.params.day? then @props.routerState.params.day else null
    selected_draw = if @props.routerState.params.draw? then @props.routerState.params.draw else null
    for day in days
      # Get the day as a string
      day_str = dayToStr day
      is_selected_day = (selected_day? && selected_day == day_str)
      if day.draws? && (is_selected_day || !selected_day?)
        for draw in day.draws
          # Get the draw as a string
          draw_str = drawToStr draw
          if (draw.active && !selected_draw?) || (selected_draw? && is_selected_day && (selected_draw == draw_str))
            @setState day: day, draw: draw
            return

    _days = days
    _days.reverse()
    for day in _days
      if day.draws?
        id = day.draws.length-1
        @setState day: day, draw: day.draws[id]
        return


  loadDataFromServer: ->
    console.log 'Scoreboard.loadDataFromServer', @isMounted()
    return unless @isMounted()
    scoreboard_path = @props.routerState.path.split('/').slice(1, 4).join('/')
    scoreboard_url = @props.apiRoot + scoreboard_path + '.js'
    jQuery.ajax
      url: scoreboard_url
      dataType: 'jsonp'
      cache: true
      success: (results) =>
        days = []
        last_day_id = -1
        id = 0
        for draw, k in results.draws
          d = days[days.length-1] || null
          last_day = d.day if d

          unless last_day == draw.starts_at_day
            obj = { day: draw.starts_at_day, draws: [], date: draw.starts_at_date, id: id, starts_on: draw.starts_on, starts_at_timestamp: draw.starts_at_timestamp }
            days.push obj
            last_day_id = days.length - 1
            id++
          days[last_day_id].draws.push draw

        @setState {scoreboard: results, days: days }
        @determineDraw days
        setTimeout @loadDataFromServer, @state.pollInterval

  componentDidMount: ->
    console.log 'Scoreboard.componentWillMount'
    @loadDataFromServer()

  #componentWillUpdate: ->
  #  @determineDraw @state.days if @state.days?

  render: ->
    console.log 'Scoreboard', @
    unless @state.day? && @state.draw?
      return div className: 'row',
        div className: 'col-xs-12', 'Loading Scoreboard...'

    { days, scoreboard, day, draw } = @state

    location_str = ''
    if scoreboard.location? && scoreboard.venue?
      location_str = [scoreboard.venue, scoreboard.location].filter( (i) -> (i? && i) ).join ', '


    div className: 'row',
      div className: 'col-xs-12 col-sm-10',
        div className: 'row',
          div className: 'col-xs-12',
            p {},
              location_str
              br {}
              scoreboard.starts_on
              ' to '
              scoreboard.ends_on
            CompetitionDayList days: days, day: day, routerState: @props.routerState
            h3 className: 'hidden-xs', day.starts_on
            h4 className: 'visible-xs', day.starts_on
      div className: 'col-sm-2 hidden-xs',
        h6 className: 'text-right',
          'Current Time'
          br {}
          scoreboard.time_now
      div className: 'col-xs-12',
        div className: 'row',
          div className: 'col-xs-12',
            DrawList draws: day.draws, day: day, draw: draw, routerState: @props.routerState
            DrawContentList draws: day.draws, draw: draw, competition: @props.competition, routerState: @props.routerState
            p {}, 'LSFE: Last shot in the first end'


window.CurlcastScoreboard = Scoreboard

